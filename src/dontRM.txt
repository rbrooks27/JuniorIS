"""
import os
from tqdm import tqdm
from combined123 import parse_multistep_smirks, draw_multistep_pathway


Overview:
This script reads a dataset of chemical reactions in SMIRKS format (Reactants > Reagents > Products)
and generates visual representations of the reaction pathways using the unified parser/drawing functions.


# -------------------------------
# Dataset and output settings
# -------------------------------

# dataset_file = "dataset/textbookReactions.txt"  # smaller sample for testing
dataset_file = "dataset/reactionSmilesFigShare2024.txt"  # full dataset

output_dir = "data/reactions2"  # output directory for pathway images
# output_dir = "data/reactions"  # output directory for pathway images
os.makedirs(output_dir, exist_ok=True)

MAX_LINES = 10  # set to None to process all lines

# -------------------------------
# Process each SMIRKS line
# -------------------------------
with open(dataset_file, "r") as f:
    for i, line in enumerate(tqdm(f, desc="Generating pathways")):
        if MAX_LINES and i >= MAX_LINES:
            break

        line = line.strip()
        if not line:
            continue

        # Skip invalid lines
        if ">" not in line:
            print(f"Skipping invalid SMIRKS line {i}: {line}")
            continue

        try:
            # Parse the SMIRKS into steps
            steps = parse_multistep_smirks(line)

            # Skip if parsing returned nothing
            if not steps:
                print(f"No valid steps found at line {i}")
                continue

            # Generate output path
            output_path = os.path.join(output_dir, f"reaction_{i}.png")

            # Draw the multistep pathway
            draw_multistep_pathway(steps, output_path)

        except Exception as e:
            print(f"Error processing line {i}: {line}")
            print(f"Error: {e}")
            continue

print("Done generating reaction pathways!")
"""

"""
import os
from tqdm import tqdm
from rdkit import Chem
from combined123 import draw_multistep_pathway  # unified drawing function


Overview:
This script reads a dataset of chemical reactions in SMIRKS/SMILES format.
It handles:
- Multiple reactions concatenated in a single line
- Metals and counterions (skipped for visualization)
- Multiple molecules per reactant/product separated by "."
It generates multistep pathway images for valid reactions.


# -------------------------------
# Settings
# -------------------------------
# dataset_file = "dataset/textbookReactions.txt"  # smaller sample for testing
dataset_file = "dataset/reactionSmilesFigShare2024.txt"  # full dataset

output_dir = "data/reactions_realworld"
os.makedirs(output_dir, exist_ok=True)

MAX_LINES = 20  # limit for testing, set to None for full dataset
ALLOWED_ATOMS = {"C","H","O","N","P","S","F","Cl","Br","I"}  # atoms to allow for visualization

# -------------------------------
# Helper functions
# -------------------------------

def safe_mols(smiles_list):
    #Convert a list of SMILES strings to RDKit molecules, skip invalid or empty.
    mols = []
    for s in smiles_list:
        try:
            mol = Chem.MolFromSmiles(s)
            if mol and all(atom.GetSymbol() in ALLOWED_ATOMS for atom in mol.GetAtoms()):
                Chem.rdDepictor.Compute2DCoords(mol)
                mols.append(mol)
        except:
            continue
    return mols

def parse_realworld_line(line):
    
    Parse a line containing one or multiple concatenated reactions.
    Returns a list of (reactant_smiles, reagents_str, product_smiles) steps.
    
    steps = []
    segments = line.split(">")
    # process segments in groups of 3: reactants > reagents > products
    for i in range(0, len(segments)-2, 3):
        reactants_str, reagents_str, products_str = segments[i:i+3]

        reactants = safe_mols(reactants_str.split("."))
        products = safe_mols(products_str.split("."))
        reagents = [r.strip() for r in reagents_str.split(".") if r.strip()]

        # skip empty steps
        if not reactants or not products:
            continue

        # pick main product (largest heavy atom count)
        main_prod = max(products, key=lambda m: m.GetNumHeavyAtoms())
        for react in reactants:
            steps.append((Chem.MolToSmiles(react), ", ".join(reagents), Chem.MolToSmiles(main_prod)))

    return steps

# -------------------------------
# Process dataset
# -------------------------------
with open(dataset_file, "r") as f:
    for i, line in enumerate(tqdm(f, desc="Generating pathways")):
        if MAX_LINES and i >= MAX_LINES:
            break

        line = line.strip()
        if not line:
            continue

        try:
            steps = parse_realworld_line(line)
            if not steps:
                print(f"No valid steps found at line {i}")
                continue

            output_path = os.path.join(output_dir, f"reaction_{i}.png")
            draw_multistep_pathway(steps, output_path)

        except Exception as e:
            print(f"Error processing line {i}: {line}")
            print(f"Error: {e}")
            continue

print("Done generating multistep pathways!")
"""